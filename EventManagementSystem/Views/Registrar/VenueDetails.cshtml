@model EventManagementSystem.Models.Venue

@{
    ViewData["Title"] = Model.Name;
    Layout = "_RegistrarLayout";
}

<div class="container mx-auto px-4 py-8">
    <nav class="flex mb-6" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-4">
            <li>
                <div>
                    <a href="@Url.Action("Index", "Registrar")" class="text-gray-400 hover:text-gray-500">
                        <i class="fas fa-home"></i>
                        <span class="sr-only">Dashboard</span>
                    </a>
                </div>
            </li>
            <li>
                <div class="flex items-center">
                    <i class="fas fa-chevron-right text-gray-400 text-sm"></i>
                    <a href="@Url.Action("MyVenues", "Registrar")" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">My Venues</a>
                </div>
            </li>
            <li>
                <div class="flex items-center">
                    <i class="fas fa-chevron-right text-gray-400 text-sm"></i>
                    <span class="ml-4 text-sm font-medium text-gray-500" aria-current="page">@Model.Name</span>
                </div>
            </li>
        </ol>
    </nav>
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-900">Venue Details</h1>
        <div class="flex space-x-4">
            <a href="@Url.Action("EditVenue", "Registrar", new { id = Model.Id })" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-300">
                <i class="fas fa-edit mr-2"></i>
                Edit Venue
            </a>
            <button id="delete-venue-btn" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-all duration-300">
                <i class="fas fa-trash-alt mr-2"></i>
                Delete Venue
            </button>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div class="lg:col-span-2">
            <div class="bg-white shadow rounded-lg overflow-hidden mb-8">
                <div class="relative h-96">
                    <img src="@Model.ImageUrl" alt="@Model.Name" class="w-full h-full object-cover">
                    <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent"></div>
                    <div class="absolute bottom-4 left-4">
                        <h2 class="text-2xl font-bold text-white mb-1">@Model.Name</h2>
                        <p class="text-white/80 flex items-center">
                            <i class="fas fa-map-marker-alt mr-1"></i>
                            @Model.Location
                        </p>
                    </div>
                    <div class="absolute top-4 right-4 flex space-x-2">
                        <span class="px-3 py-1 bg-white/90 rounded-full text-sm font-medium @(Model.IsActive ? "text-green-600" : "text-red-600")">
                            @(Model.IsActive ? "Active" : "Inactive")
                        </span>
                    </div>
                </div>
                <div class="p-4 grid grid-cols-5 gap-2">
                    @if (Model.AdditionalImages != null)
                    {
                        @foreach (var image in Model.AdditionalImagesList.Take(5))
                                {
                                    <div class="group relative aspect-w-1 aspect-h-1 rounded-lg overflow-hidden cursor-pointer hover:opacity-90 transition-all duration-300 shadow-sm hover:shadow-md">
                                        <img src="@image" alt="Additional view of @Model.Name" class="w-full h-full object-cover">
                                        <div class="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                                            <i class="fas fa-expand text-white text-xl"></i>
                                        </div>
                                    </div>
                                }
                    }
                </div>
            </div>
            <div class="bg-white shadow rounded-lg overflow-hidden mb-8">
                <div class="border-b border-gray-200 px-6 py-4">
                    <h2 class="text-xl font-semibold text-gray-900">Details & Description</h2>
                </div>
                <div class="p-6">
                    <div class="mb-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-2">Description</h3>
                        <p class="text-gray-700">
                            @Model.Description
                        </p>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Features</h3>
                            <ul class="space-y-3">
                                @foreach (var feature in Model.FeaturesList)
                                    {
                                        <li class="flex items-center text-gray-700">
                                            <span class="flex-shrink-0 w-6 h-6 flex items-center justify-center rounded-full bg-primary-100 text-primary-600">
                                                <i class="fas fa-check text-sm"></i>
                                            </span>
                                            <span class="ml-3">@feature</span>
                                        </li>
                                    }
                            </ul>
                        </div>
                        <div>
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Specifications</h3>
                            <div class="space-y-3">
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-500">Capacity</span>
                                    <span class="text-gray-700 font-medium">@Model.Capacity people</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-500">Venue Size</span>
                                    <span class="text-gray-700 font-medium">@Model.Size sq ft</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-500">Price Per Hour</span>
                                    <span class="text-gray-700 font-medium">₹@Model.PricePerHour</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-500">Cleaning Fee</span>
                                    <span class="text-gray-700 font-medium">₹@Model.CleaningFee</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-500">Venue Types</span>
                                    <div class="flex flex-wrap gap-2 justify-end">
                                        @if (Model.VenueTypes != null)
                                        {
                                            @foreach (var type in Model.VenueTypesList)
                                            {
                                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                    @type
                                                </span>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div>

                        <h3 class="text-lg font-medium text-gray-900 mb-4">
                            <i class="fas fa-map-marked-alt mr-2 text-red-500"></i>
                            Location
                        </h3>
                        <div class="h-64 bg-gray-200 rounded-lg mb-2">
                            <div class="h-full flex items-center justify-center">
                                <div class="mapouter"><div class="gmap_canvas"><iframe class="gmap_iframe" width="100%" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.com/maps?width=600&height=300&hl=en&q=@(Uri.EscapeDataString(Model.Location))&t=k&z=14&ie=UTF8&iwloc=B&output=embed
"></iframe><a href="https://embed-googlemap.com">google map embed html</a></div><style>.mapouter{position:relative;text-align:right;width:100%;height:300px;}.gmap_canvas {overflow:hidden;background:none!important;width:100%;height:280px;}.gmap_iframe {height:300px!important;}</style></div>
                            </div>
                        </div>
                        <p class="text-gray-700">
                            @Model.Address , @Model.Location
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div>
            <div class="bg-white shadow rounded-lg overflow-hidden mb-8">
                <div class="border-b border-gray-200 px-6 py-4">
                    <h2 class="text-xl font-semibold text-gray-900">Venue Statistics</h2>
                </div>
                <div class="p-6">
                    <div class="grid grid-cols-2 gap-4">
                        <div class="bg-gray-50 p-4 rounded-lg text-center">
                            <div class="text-3xl font-bold text-gray-900">@Model.Rating</div>
                            <div class="flex items-center justify-center mt-1 mb-2">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= Math.Floor(Model.Rating))
                                    {
                                        <i class="fas fa-star text-yellow-400 text-sm"></i>
                                    }
                                    else if (i - Model.Rating < 1 && i - Model.Rating > 0)
                                    {
                                        <i class="fas fa-star-half-alt text-yellow-400 text-sm"></i>
                                    }
                                    else
                                    {
                                        <i class="far fa-star text-yellow-400 text-sm"></i>
                                    }
                                }
                            </div>
                            <div class="text-sm text-gray-500">@Model.ReviewCount reviews</div>
                        </div>
                        <div class="bg-gray-50 p-4 rounded-lg text-center">
                            <div class="text-3xl font-bold text-gray-900">154</div>
                            <div class="text-sm text-gray-500">Bookings</div>
                        </div>
                        <div class="bg-gray-50 p-4 rounded-lg text-center">
                            <div class="text-3xl font-bold text-gray-900">87%</div>
                            <div class="text-sm text-gray-500">Occupancy</div>
                        </div>
                        <div class="bg-gray-50 p-4 rounded-lg text-center">
                            <div class="text-3xl font-bold text-gray-900">₹14.5k</div>
                            <div class="text-sm text-gray-500">Revenue</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-white shadow rounded-lg overflow-hidden mb-8">
                <div class="border-b border-gray-200 px-6 py-4">
                    <h2 class="text-xl font-semibold text-gray-900">Quick Actions</h2>
                </div>
                <div class="p-6 space-y-4">
                   
                    <button id="toggle-status-btn" class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium @(Model.IsActive ? "text-red-700" : "text-green-700") bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-300">
                        <i class="@(Model.IsActive ? "fas fa-toggle-off" : "fas fa-toggle-on") mr-2"></i>
                        @(Model.IsActive ? "Deactivate Venue" : "Activate Venue")
                    </button>
                </div>
            </div>
            <div class="bg-white shadow rounded-lg overflow-hidden">
                <div class="border-b border-gray-200 px-6 py-4">
                    <h2 class="text-xl font-semibold text-gray-900">Additional Information</h2>
                </div>
                <div class="p-6 space-y-4">
                    <div>
                        <h3 class="text-sm font-medium text-gray-500">Created On</h3>
                        <p class="mt-1 text-gray-900">@Model.CreatedAt.ToString("MMMM dd, yyyy")</p>
                    </div>
                    <div>
                        <h3 class="text-sm font-medium text-gray-500">Last Updated</h3>
                        <p class="mt-1 text-gray-900">@Model.UpdatedAt.ToString("MMMM dd, yyyy")</p>
                    </div>
                    <div>
                        <h3 class="text-sm font-medium text-gray-500">Venue ID</h3>
                        <p class="mt-1 text-gray-900">#@Model.Id.ToString("D6")</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="delete-modal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                        <i class="fas fa-exclamation-triangle text-red-600"></i>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Delete Venue</h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500">
                                Are you sure you want to delete this venue? All data associated with this venue will be permanently removed. This action cannot be undone.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <form action="@Url.Action("DeleteVenue", "Registrar", new { id = Model.Id })" method="post">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Delete
                    </button>
                </form>
                <button type="button" id="cancel-delete" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const deleteBtn = document.getElementById('delete-venue-btn');
            const deleteModal = document.getElementById('delete-modal');
            const cancelDelete = document.getElementById('cancel-delete');
            
            if (deleteBtn && deleteModal && cancelDelete) {
                deleteBtn.addEventListener('click', function() {
                    deleteModal.classList.remove('hidden');
                });
                
                cancelDelete.addEventListener('click', function() {
                    deleteModal.classList.add('hidden');
                });
            }
            const toggleStatusBtn = document.getElementById('toggle-status-btn');
            if (toggleStatusBtn) {
                toggleStatusBtn.addEventListener('click', function() {
                    const venueId = @Model.Id;
                    const isCurrentlyActive = @Model.IsActive.ToString().ToLower();
                    const newStatus = !isCurrentlyActive;
                    toggleStatusBtn.disabled = true;
                    toggleStatusBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Updating...';
                    fetch('/Registrar/ToggleVenueStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({
                            venueId: venueId,
                            isActive: newStatus
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            toggleStatusBtn.innerHTML = newStatus 
                                ? '<i class="fas fa-toggle-on mr-2"></i> Deactivate Venue'
                                : '<i class="fas fa-toggle-off mr-2"></i> Activate Venue';
                            const statusBadge = document.querySelector('.status-badge');
                            if (statusBadge) {
                                statusBadge.className = newStatus 
                                    ? 'px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800'
                                    : 'px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800';
                                statusBadge.textContent = newStatus ? 'Active' : 'Inactive';
                            }
                            showToast('Venue status updated successfully!');
                        } else {
                            throw new Error(data.message || 'Failed to update venue status');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Error updating venue status: ' + error.message, 'error');
                    })
                    .finally(() => {
                        toggleStatusBtn.disabled = false;
                    });
                });
            }
            function showToast(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded-md text-white ${
                    type === 'success' ? 'bg-green-600' : 'bg-red-600'
                }`;
                toast.textContent = message;
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    toast.remove();
                }, 3000);
            }
            const galleryImages = document.querySelectorAll('.gallery-thumbnail');
            const mainImage = document.querySelector('.main-image');
            
            if (galleryImages.length && mainImage) {
                galleryImages.forEach(img => {
                    img.addEventListener('click', function() {
                        mainImage.src = this.src;
                    });
                });
            }
        });
    </script>
} 